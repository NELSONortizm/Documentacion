<!-- This template accepts three inputs and creates the destination 
"Property" node.  Inside the template, it calls another template which 
builds up the potentially repeating "Value" child node -->
<xsl:template name="WritePropertyNodeTemplate">
	<xsl:param name="Version"/>
	<xsl:param name="Source"/>
	<xsl:param name="Target"/>
	<xsl:param name="Agency"/>
	<xsl:param name="Department"/>
	<xsl:param name="Endpoint"/>
	<xsl:param name="CreationDate"/>
	<xsl:param name="Subject"/>
	<xsl:param name="Message"/>
	<xsl:param name="Urgent"/>
	<xsl:param name="MessageType"/>
	<xsl:param name="MessageSubType"/>
	<xsl:param name="AgentId"/>
	<xsl:param name="AgentName"/>
	<xsl:param name="AgentWorkstation"/>
	<xsl:param name="AgentDepartment"/>	
	<xsl:param name="AgentAgency"/>
	<xsl:param name="Role"/>
	<xsl:param name="SendTo"/>
	<xsl:param name="Destination"/>
	<xsl:param name="PlaceDescription"/>	
	<!-- create property node -->
	<CAD_Messaging_DataContractWithHeader>
		<Header>
			<Version>
				<xsl:value-of select="$Version"/>
			</Version>
			<Source>
				<xsl:value-of select="$Source"/>
			</Source>
			<Target>
				<xsl:value-of select="$Target"/>
			</Target>
			<Agency>
				<xsl:value-of select="$Agency"/>
			</Agency>
			<Department>
				<xsl:value-of select="$Department"/>
			</Department>
			<Endpoint>
				<xsl:value-of select="$Endpoint"/>
			</Endpoint>
		</Header>
		<Body>
			<Messages>
				<Message>
					<CreationDate>
						<xsl:value-of select="$CreationDate"/>
					</CreationDate>
					<Subject>
						<xsl:value-of select="$Subject"/>
					</Subject>
					<Message>
						<xsl:value-of select="$Message"/>
					</Message>
					<Urgent>
						<xsl:value-of select="$Urgent"/>
					</Urgent>
					<MessageType>
						<xsl:value-of select="$MessageType"/>
					</MessageType>
					<MessageSubType>
						<xsl:value-of select="$MessageSubType"/>
					</MessageSubType>
				</Message>
				<Sender>
					<Agent>
						<AgentId>
							<xsl:value-of select="$AgentId"/>
						</AgentId>
						<AgentName>
							<xsl:value-of select="$AgentName"/>
						</AgentName>
						<AgentWorkstation>
							<xsl:value-of select="$AgentWorkstation"/>
						</AgentWorkstation>
						<AgentDepartment>
							<xsl:value-of select="$AgentDepartment"/>
						</AgentDepartment>
						<AgentAgency>
							<xsl:value-of select="$AgentAgency"/>
						</AgentAgency>
						<Role>
							<xsl:value-of select="$Role"/>
						</Role>
					</Agent>
				</Sender>
				<Recipient>
					<xsl:call-template name="StringSplit">
						<xsl:with-param name="val" select="$SendTo"/>
					</xsl:call-template>
					<Destination>
						<xsl:value-of select="$Destination"/>
					</Destination>
					<PlaceDescription>
						<xsl:value-of select="$PlaceDescription"/>
					</PlaceDescription>
				</Recipient>
			</Messages>
		</Body>
	</CAD_Messaging_DataContractWithHeader>
</xsl:template>
<!-- This template accepts a string and pulls out the value before the 
designated delimiter -->
<xsl:template name="StringSplit">
	<xsl:param name="val"/>
	<!-- do a check to see if the input string (still) has a "|" in it -->
	<xsl:choose>
		<xsl:when test="contains($val, ',')">
			<!-- pull out the value of the string before the "," delimiter -->
			<SendTo>
				<xsl:value-of select="substring-before($val, ',')"/>
			</SendTo>
			<!-- recursively call this template and pass in 
value AFTER the "|" delimiter -->
			<xsl:call-template name="StringSplit">
				<xsl:with-param name="val" select="substring-after($val, ',')"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:otherwise>
			<!-- if there is no more delimiter values, print out 
the whole string -->
			<SendTo>
				<xsl:value-of select="$val"/>
			</SendTo>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>