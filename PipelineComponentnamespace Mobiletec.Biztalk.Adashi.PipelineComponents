namespace Mobiletec.Biztalk.Adashi.PipelineComponents
{
    using System;
    using System.IO;
    using System.Text;
    using System.Drawing;
    using System.Resources;
    using System.Reflection;
    using System.Diagnostics;
    using System.Collections;
    using System.ComponentModel;
    using System.Globalization;
    using Microsoft.BizTalk.Message.Interop;
    using Microsoft.BizTalk.Component.Interop;
    using Microsoft.BizTalk.Component;
    using Microsoft.BizTalk.Messaging;
    using Microsoft.BizTalk.Streaming;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using Mobiletec.Biztalk.Adashi.PipelineComponents.LiveCad;
    using System.Linq;
    using System.Xml.Serialization;
    using Microsoft.BizTalk.CAT.BestPractices.Framework.Instrumentation;
    using MobileTec.BizTalk.Utilities.Configuration.Helper;

    [ComponentCategory(CategoryTypes.CATID_PipelineComponent)]
    [System.Runtime.InteropServices.Guid("e0698ec1-4d2c-4c99-9d6c-edbb6eea7a35")]
    [ComponentCategory(CategoryTypes.CATID_Decoder)]
    public class ConvertLiveCADResult_To_XML : Microsoft.BizTalk.Component.Interop.IComponent, IBaseComponent, IPersistPropertyBag, IComponentUI
    {
        
        private System.Resources.ResourceManager _resourceManager = new System.Resources.ResourceManager("Mobiletec.Biztalk.Adashi.PipelineComponents.ConvertLiveCADResult_To_XML", Assembly.GetExecutingAssembly());

        private string subscriptionMessageType;

        public string SubscriptionMessageType
        {
            get { return subscriptionMessageType; }
            set { subscriptionMessageType = value; }
        }

        private string subscriptionTargetID;

        public string SubscriptionTargetID
        {
            get { return subscriptionTargetID; }
            set { subscriptionTargetID = value; }
        }


        #region IBaseComponent members
        /// <summary>
        /// Name of the component
        /// </summary>
        [Browsable(false)]
        public string Name
        {
            get
            {
                return _resourceManager.GetString("COMPONENTNAME", CultureInfo.InvariantCulture);
            }
        }
        
        /// <summary>
        /// Version of the component
        /// </summary>
        [Browsable(false)]
        public string Version
        {
            get
            {
                return _resourceManager.GetString("COMPONENTVERSION", CultureInfo.InvariantCulture);
            }
        }
        
        /// <summary>
        /// Description of the component
        /// </summary>
        [Browsable(false)]
        public string Description
        {
            get
            {
                return _resourceManager.GetString("COMPONENTDESCRIPTION", CultureInfo.InvariantCulture);
            }
        }
        #endregion
        
        #region IPersistPropertyBag members
        /// <summary>
        /// Gets class ID of component for usage from unmanaged code.
        /// </summary>
        /// <param name="classID">
        /// Class ID of the component
        /// </param>
        public void GetClassID(out System.Guid classID)
        {
            classID = new System.Guid("e0698ec1-4d2c-4c99-9d6c-edbb6eea7a35");
        }
        
        /// <summary>
        /// not implemented
        /// </summary>
        public void InitNew()
        {
            this.SubscriptionMessageType = "";
            this.SubscriptionTargetID = "";
        }
        
        /// <summary>
        /// Loads configuration properties for the component
        /// </summary>
        /// <param name="propertyBag">Configuration property bag</param>
        /// <param name="errorLog">Error status</param>
        public virtual void Load(Microsoft.BizTalk.Component.Interop.IPropertyBag propertyBag, int errorLog)
        {
            try
            {
                object valor;

                valor = ReadPropertyBag(propertyBag, "SubscriptionMessageType");
                if (valor != null)
                    SubscriptionMessageType = (string)valor;

                valor = ReadPropertyBag(propertyBag, "SubscriptionTargetID");
                if (valor != null)
                    SubscriptionTargetID = (string)valor;
            }
            catch
            { }
        }
        
        /// <summary>
        /// Saves the current component configuration into the property bag
        /// </summary>
        /// <param name="propertyBag">Configuration property bag</param>
        /// <param name="clearDirty">not used</param>
        /// <param name="saveAllProperties">not used</param>
        public virtual void Save(Microsoft.BizTalk.Component.Interop.IPropertyBag propertyBag, bool clearDirty, bool saveAllProperties)
        {
            WritePropertyBag(propertyBag, "SubscriptionMessageType", (object)SubscriptionMessageType);
            WritePropertyBag(propertyBag, "SubscriptionTargetID", (object)SubscriptionTargetID);
        }

        #region utility functionality
        /// <summary>
        /// Reads property value from property bag
        /// </summary>
        /// <param name="propertyBag">Property bag</param>
        /// <param name="propertyName">Name of property</param>
        /// <returns>Value of the property</returns>
        private object ReadPropertyBag(Microsoft.BizTalk.Component.Interop.IPropertyBag propertyBag, string propertyName)
        {
            object val = null;
            try
            {
                propertyBag.Read(propertyName, out val, 0);
            }
            catch (System.ArgumentException )
            {
                return val;
            }
            catch (System.Exception e)
            {
                throw new System.ApplicationException(e.Message);
            }
            return val;
        }
        
        /// <summary>
        /// Writes property values into a property bag.
        /// </summary>
        /// <param name="propertyBag">Property bag.</param>
        /// <param name="propertyName">Name of property.</param>
        /// <param name="val">Value of property.</param>
        private void WritePropertyBag(Microsoft.BizTalk.Component.Interop.IPropertyBag propertyBag, string propertyName, object val)
        {
            try
            {
                propertyBag.Write(propertyName, ref val);
            }
            catch (System.Exception e)
            {
                throw new System.ApplicationException(e.Message);
            }
        }
        #endregion
        #endregion
        
        #region IComponentUI members
        /// <summary>
        /// Component icon to use in BizTalk Editor
        /// </summary>
        [Browsable(false)]
        public IntPtr Icon
        {
            get
            {
                return ((System.Drawing.Bitmap)(this._resourceManager.GetObject("COMPONENTICON", CultureInfo.InvariantCulture))).GetHicon();
            }
        }
        
        /// <summary>
        /// The Validate method is called by the BizTalk Editor during the build 
        /// of a BizTalk project.
        /// </summary>
        /// <param name="projectSystem">An Object containing the configuration properties.</param>
        /// <returns>The IEnumerator enables the caller to enumerate through a collection of strings containing error messages. These error messages appear as compiler error messages. To report successful property validation, the method should return an empty enumerator.</returns>
        public System.Collections.IEnumerator Validate(object projectSystem)
        {
            // example implementation:
            // yield return "This is a compiler error";
            // yield break;
            return null;
        }
        #endregion
        
        #region IComponent members
        /// <summary>
        /// Implements IComponent.Execute method.
        /// </summary>
        /// <param name="pContext">Pipeline context</param>
        /// <param name="pInMsg">Input message</param>
        /// <returns>Original input message</returns>
        /// <remarks>
        /// IComponent.Execute method is used to initiate
        /// the processing of the message in this pipeline component.
        /// </remarks>
        public Microsoft.BizTalk.Message.Interop.IBaseMessage Execute(Microsoft.BizTalk.Component.Interop.IPipelineContext pContext, Microsoft.BizTalk.Message.Interop.IBaseMessage pInMsg)
        {
            System.Guid callToken = TraceManager.PipelineComponent.TraceIn("ConvertLiveCADResult_To_XML");
            string ScopeName = "ConvertLiveCADResult_To_XML_Execute";
            long ScopeStart = TraceManager.PipelineComponent.TraceStartScope(ScopeName);

            try
            {
                string json = ObtenerMensaje(pInMsg);

                string livecadresult = JsonConvert.DeserializeObject<Dictionary<string, object>>(json)["LiveCadNetResult"].ToString();

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se obtuvo LiveCADNetResult", ScopeName));

                LiveCADNetResult deserialized = JsonConvert.DeserializeObject<LiveCADNetResult>(livecadresult);
                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se obtuvo la informaci√≥n de eventos y unidades", ScopeName));

                LiveCAD livecad = new LiveCAD();


                if (deserialized == null || deserialized.Events == null)
                {

                    TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - No hay Eventos", ScopeName));
                    livecad.Events = new List<Event>();
                }
                else
                {
                    livecad.Events = deserialized.Events.Values.ToList();
                }

                if (deserialized == null || deserialized.Units == null)
                {

                    TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - No hay Unidades", ScopeName));
                    livecad.Units = new List<UnitClass>();
                }
                else
                {
                    livecad.Units = deserialized.Units.Values.ToList();
                }
                              

                string[] unitsWithEventNumber = livecad.Units
                                                    .Where(unit => string.IsNullOrWhiteSpace(unit.EventNumber) == false)
                                                    .Select(unit => unit.EventNumber)
                                                    .Distinct()
                                                    .ToArray();

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Eventos activos: {1}", ScopeName, string.Join(" ", unitsWithEventNumber)));

                AgencyEqualityComparer agencyEqualityComparer = new AgencyEqualityComparer();
                ConfigReader cr = new ConfigReader();

                livecad.Events.ForEach(e =>
                {
                    e.NarrativesArray = e.CAD_CallNarrative.Values.ToList();
                    e.UnitActivityLogArray = e.UnitActivityLog.Values.ToList();

                    e.Agencies = livecad.Units
                                        .Where(u => u.EventNumber == e.EventNumber)
                                        .Select(u => new Agency { AgencyName = u.AgencyName, DepartmentName = u.DepartmentName })
                                        .Distinct(agencyEqualityComparer)
                                        .ToList();

                    e.Agencies = e.Agencies
                                    .Where(a => cr.ValidarAgenciaDestino(a.AgencyName, a.DepartmentName, SubscriptionMessageType, SubscriptionTargetID)).ToList();

                    e.IsActive = (e.Agencies.Count > 0);

                });

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se obtuvo la informaci√≥n de eventos activos", ScopeName));

                List<Agency> agenciesInUnits = livecad.Units
                                .Where(u => string.IsNullOrWhiteSpace(u.EventNumber) && !string.IsNullOrWhiteSpace(u.AgencyName) && !string.IsNullOrWhiteSpace(u.DepartmentName))
                                .Select(u => new Agency { AgencyName = u.AgencyName, DepartmentName = u.DepartmentName })
                                .Distinct(agencyEqualityComparer)
                                .ToList();

                agenciesInUnits = agenciesInUnits
                                    .Where(a => cr.ValidarAgenciaDestino(a.AgencyName, a.DepartmentName, SubscriptionMessageType, SubscriptionTargetID)).ToList();


                agenciesInUnits.ForEach(a =>
                                livecad.Units
                                    .Where(u => string.IsNullOrWhiteSpace(u.EventNumber) && u.AgencyName == a.AgencyName && u.DepartmentName == a.DepartmentName)
                                    .ToList()
                                    .ForEach(u => u.SendToTarget = true)
                                );

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se obtuvo la informaci√≥n de unidades activas", ScopeName));

                XmlSerializer serializer = new XmlSerializer(typeof(LiveCAD));

                MemoryStream ms = new MemoryStream();
                serializer.Serialize(ms, livecad);
                ms.Flush();
                ms.Position = 0;

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se serializ√≥ el resultado", ScopeName));

                pInMsg.BodyPart.Data = ms;

                TraceManager.PipelineComponent.TraceInfo(string.Format("{0} - Se asign√≥ el XML al mensaje de salida.", ScopeName));

                TraceManager.PipelineComponent.TraceEndScope(ScopeName, ScopeStart);
                TraceManager.PipelineComponent.TraceOut(callToken);

                return pInMsg;

            }//try


            catch(Exception ex)
            {
                TraceManager.PipelineComponent.TraceError(ex);
                TraceManager.PipelineComponent.TraceEndScope(ScopeName, ScopeStart);
                TraceManager.PipelineComponent.TraceOut(callToken);
                throw (ex);
            }

            
        }
        #endregion

        #region private functions
        private string ObtenerMensaje(IBaseMessage pInMsg)
        {
            string ScopeName = "ConvertLiveCADResult_To_XML_ObtenerMensaje";
            long ScopeStart = TraceManager.PipelineComponent.TraceStartScope(ScopeName);

            StreamReader reader = new StreamReader(pInMsg.BodyPart.GetOriginalDataStream());
            string Result = reader.ReadToEnd();
            pInMsg.BodyPart.Data.Seek(0, SeekOrigin.Begin);

            int linea = 0;
            int cantidad = 5000;
            int inicio;

            do
            {
                inicio = linea * cantidad;

                if (Result.Length < (inicio + cantidad))
                    cantidad = Result.Length - inicio;

                TraceManager.PipelineComponent.TraceInfo("{2} - Linea {0}: {1}", linea + 1, Result.Substring(inicio, cantidad), ScopeName);
                linea += 1;
            } while ((inicio + cantidad) < Result.Length);

            TraceManager.PipelineComponent.TraceEndScope(ScopeName, ScopeStart);

            return Result;
        }
        #endregion private functions
    }
}
